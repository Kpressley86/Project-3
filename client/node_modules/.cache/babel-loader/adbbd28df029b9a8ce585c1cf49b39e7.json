{"ast":null,"code":"// import React, { Component } from \"react\";\n// import PropTypes from \"prop-types\";\n// import hljs from \"highlight.js/lib/highlight\";\n// import \"highlight.js/styles/monokai-sublime.css\";\n// const registeredLanguages = {};\n// class Highlight extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { loaded: false };\n//     this.codeNode = React.createRef();\n//   }\n//   componentDidMount() {\n//     const { language } = this.props;\n//     if (language && !registeredLanguages[language]) {\n//       try {\n//         const newLanguage = require(`highlight.js/lib/languages/${language}`);\n//         hljs.registerLanguage(language, newLanguage);\n//         registeredLanguages[language] = true;\n//         this.setState({ loaded: true }, this.highlight);\n//       } catch (e) {\n//         console.error(e);\n//         throw Error(`Cannot register the language ${language}`);\n//       }\n//     } else {\n//       this.setState({ loaded: true });\n//     }\n//   }\n//   componentDidUpdate() {\n//     this.highlight();\n//   }\n//   highlight = () => {\n//     this.codeNode &&\n//       this.codeNode.current &&\n//       hljs.highlightBlock(this.codeNode.current);\n//   };\n//   render() {\n//     const { language, children } = this.props;\n//     const { loaded } = this.state;\n//     if (!loaded) {\n//       return null;\n//     }\n//     return (\n//       <pre className=\"rounded\">\n//         <code ref={this.codeNode} className={language}>\n//           {children}\n//         </code>\n//       </pre>\n//     );\n//   }\n// }\n// Highlight.propTypes = {\n//   children: PropTypes.node.isRequired,\n//   language: PropTypes.string\n// };\n// Highlight.defaultProps = {\n//   language: \"json\"\n// };\n// export default Highlight;","map":{"version":3,"sources":["C:/Users/kelly/Desktop/Project-3/client/src/components/highlight.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["// import React, { Component } from \"react\";\n// import PropTypes from \"prop-types\";\n// import hljs from \"highlight.js/lib/highlight\";\n// import \"highlight.js/styles/monokai-sublime.css\";\n\n// const registeredLanguages = {};\n\n// class Highlight extends Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = { loaded: false };\n//     this.codeNode = React.createRef();\n//   }\n\n//   componentDidMount() {\n//     const { language } = this.props;\n\n//     if (language && !registeredLanguages[language]) {\n//       try {\n//         const newLanguage = require(`highlight.js/lib/languages/${language}`);\n//         hljs.registerLanguage(language, newLanguage);\n//         registeredLanguages[language] = true;\n\n//         this.setState({ loaded: true }, this.highlight);\n//       } catch (e) {\n//         console.error(e);\n//         throw Error(`Cannot register the language ${language}`);\n//       }\n//     } else {\n//       this.setState({ loaded: true });\n//     }\n//   }\n\n//   componentDidUpdate() {\n//     this.highlight();\n//   }\n\n//   highlight = () => {\n//     this.codeNode &&\n//       this.codeNode.current &&\n//       hljs.highlightBlock(this.codeNode.current);\n//   };\n\n//   render() {\n//     const { language, children } = this.props;\n//     const { loaded } = this.state;\n\n//     if (!loaded) {\n//       return null;\n//     }\n\n//     return (\n//       <pre className=\"rounded\">\n//         <code ref={this.codeNode} className={language}>\n//           {children}\n//         </code>\n//       </pre>\n//     );\n//   }\n// }\n\n// Highlight.propTypes = {\n//   children: PropTypes.node.isRequired,\n//   language: PropTypes.string\n// };\n\n// Highlight.defaultProps = {\n//   language: \"json\"\n// };\n\n// export default Highlight;\n"]},"metadata":{},"sourceType":"module"}